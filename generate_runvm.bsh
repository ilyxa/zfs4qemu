#!/bin/bash
# re-format script hint:
# shfmt  -i 2 -ci -sr -kp -bn -w generate_runvm.bsh
#
LC_ALL=C

#DATE="$(date -u)"
DATEUNIX="$(date +%s)"
DATE="$(date -u --date=@${DATEUNIX})"
VER="0.1"
DATASTORE="storarray/local/vms/qemu"
QEMU="qemu-system-x86_64"
QEMUARGS="-nodefaults -machine type=q35,accel=kvm,kernel_irqchip -rtc base=localtime -k en-us"
HOSTBRIDGE=br0
NATNET="192.168.76.0/24"
defaultVMCPU="host,kvm=off,hv_time,hv_relaxed,hv_spinlocks=0x1fff,hv_vpindex,hv_reset,hv_runtime,hv_crash,hv_vendor_id=freyja"
defaultVMSMP="2,sockets=1,cores=2,threads=1"
defaultVMMEM="2048M,slots=3,maxmem=4G"

DATASTOREMOUNTPOINT=$(zfs get -H -o value mountpoint $DATASTORE)
BLANKISO="$DATASTOREMOUNTPOINT/blank.iso"

# some dirty code... here
OLDIFS=$IFS
IFS="."
read -a NATNETTMP <<< $NATNET
NATNETDHCPSTART="${NATNETTMP[0]}.${NATNETTMP[1]}.${NATNETTMP[2]}.9"
unset NATNETTMP
IFS=$OLDIFS



function qemu_opts() {
	#QEMUOPTS="${QEMUOPTS} $@ \\\\\n"
	#QEMUOPTS="${QEMUOPTS} $@"
	QEMUOPTS+=("$@")
}


function template_mem_smp_cpu() {
	[ ${VMMEM} == '-' ] && {
		VMMEM=$defaultVMMEM
	}
	[ ${VMSMP} == '-' ] && {
		VMSMP=$defaultVMSMP
	}
	[ ${VMCPU} == '-' ] && {
		VMCPU=$defaultVMCPU
	}
	qemu_opts "-m $VMMEM"
	qemu_opts "-cpu $VMCPU"
	qemu_opts "-smp $VMSMP"
}

function template_network_nat_portfwd() {
	if [ "$VMNETPORTFWD" != '-' ]; then
		for i in "${!VMNETPORTFWD[@]}"; do
			local hostport
			local guestport
			OLDIFS=$IFS
			IFS=":"
			read hostport guestport <<< ${VMNETPORTFWD[i]}
			echo -n ",hostfwd=tcp::${hostport}-:${guestport}"
			IFS=$OLDIFS
		done
		return 0
	else
		echo -en
		return 1
	fi
}

function template_network() {
	NETWORKCLIUP=""
	NETWORKCLIDOWN=""

	case $VMNET in
		"bridge")
			NETWORKCLIUP="sudo ip tuntap add ${VMNAME}0 mode tap user $VMUSER\n"
			NETWORKCLIUP="${NETWORKCLIUP}sudo ip link set ${VMNAME}0 up\n"
			NETWORKCLIUP="${NETWORKCLIUP}sudo ip link set ${VMNAME}0 master $HOSTBRIDGE\n"
			NETWORKCLIDOWN="sudo ip tuntap del ${VMNAME}0 mode tap\n"

			qemu_opts "-netdev tap,id=${VMNAME}0,script=no,downscript=no,ifname=${VMNAME}0"
			qemu_opts "-device virtio-net-pci,netdev=${VMNAME}0,speed=100,mac=${VMHOSTID}"
			;;
		"nat")
			qemu_opts "-netdev user,id=${VMNAME}0,net=$NATNET,dhcpstart=${NATNETDHCPSTART}$(template_network_nat_portfwd)"
			qemu_opts "-device virtio-net-pci,netdev=${VMNAME}0,speed=100,duplex=full,mac=${VMHOSTID}"
			;;
	esac
}

function template_efi {
	qemu_opts "-bios /usr/share/ovmf/x64/OVMF.fd"
}
function template_iso() {
		qemu_opts "-drive file=$BLANKISO,index=1,media=cdrom,cache=none,readonly"
		[ "$1" == "win" ] && qemu_opts "-drive file=$BLANKISO,index=2,media=cdrom,cache=none,readonly"
}

function template_disk() {
	qemu_opts "-device virtio-scsi-pci,id=scsi0"
	qemu_opts "-drive file=${VMBOOTDISK},if=none,id=bootdisk,index=0,format=raw,discard=unmap,aio=native,cache=none,throttling.bps-total=50331648"
	#qemu_opts "-drive file=$BLANKISO,if=none,id=cdrom0,index=1,media=cdrom,cache=none,readonly"
	#qemu_opts "-drive file=$BLANKISO,if=none,id=cdrom1,index=2,media=cdrom,cache=none,readonly"
	#qemu_opts "-device scsi-cd,drive=cdrom0,bus=scsi0.0"
	#qemu_opts "-device scsi-cd,drive=cdrom1,bus=scsi0.0"
	qemu_opts "-device scsi-hd,drive=bootdisk,bus=scsi0.0"
	#~ "hide" disk: device_id=scsiHDD,product=SCSI_disk,serial=$(uuidgen),vendor=ANY_disk,ver=1.0
	# as we relys on ZFS its good idea to run into some limits to avoid arc overheating anyway
	# throttling.bps-total=50331648,throttling.iops-total=1024
}

function template_ident() {
	local VMUUID=$(uuidgen)
	qemu_opts "-name ${VMNAME} -uuid $(uuidgen)"
}

function template_usb() {
	USBCLIUP=""
	if [ "$VMUSB" != '-' ]; then
		for i in "${!VMUSB[@]}"; do
			local ret
			local device
			local OLDIFS=$IFS
			IFS=":"
			read -a device <<< ${VMUSB[i]}
			IFS=$OLDIFS
			local usb_vid=${device[0]}
			local usb_pid=${device[1]}
			local sysfsdev=$(lsusb -d ${usb_vid}:${usb_pid}) ; ret=$?
			if [ ! "${sysfsdev}x" == "x" ] ; then
				USBCLIUP="${USBCLIUP}sudo chown $VMUSER /dev/bus/usb/${sysfsdev:4:3}/${sysfsdev:15:3}\n"
			else
				echo -e "\nUSB device ${usb_vid}:${usb_pid} not connected, please check settings."
			fi
			qemu_opts "-device usb-host,vendorid=0x${usb_vid},productid=0x${usb_pid},bus=xhci.0"
		done
	fi
	return 0
}

function template_gvtg {
	# TODO
	return 0
}

function template_pcie() {
	PCIECLIUP=""
	PCIECLIDOWN=""
	if [ "$VMPCIEIDS" != '-' ]; then
		PCIECLIUP="sudo modprobe -i vfio-pci\n"
		for i in "${!VMPCIEIDS[@]}"; do
			local OLDIFS=$IFS
			IFS=,
			local dev
			local opts
			read dev opts <<< ${VMPCIEIDS[i]}
			[ -h "/sys/bus/pci/devices/${dev}/driver/unbind" ] || PCIECLIUP="${PCIECLIUP}echo $dev | sudo tee \"/sys/bus/pci/devices/${dev}/driver/unbind\"\n"
			PCIECLIUP="${PCIECLIUP}echo vfio-pci | sudo tee \"/sys/bus/pci/devices/${dev}/driver_override\"\n"
			PCIECLIUP="${PCIECLIUP}echo $dev | sudo tee \"/sys/bus/pci/drivers_probe\"\n"
			PCIECLIUP="${PCIECLIUP}sudo chown $VMUSER /dev/vfio/$(basename $(readlink -m /sys/bus/pci/devices/${dev}/iommu_group))\n"
			qemu_opts "-device vfio-pci,host=${VMPCIEIDS[i]}"
			IFS=$OLDIFS
		done
	fi
}

function template_os() {
	case $VMOS in
		linux*)
			qemu_opts "-nographic"
			[ $VMCONSOLE == '-' ] || {
				# screen //telnet localhost <port>
				local portcheck=$(ss -Htln src :${VMCONSOLE} > /dev/null)
				if [ ${portchek+x} == ${portcheck} ]; then
					qemu_opts "-serial mon:telnet:localhost:${VMCONSOLE},server,nowait"
				else
					echo  "Console port already in use, terminating."
				fi
			}
			template_iso
			;;&
		linux-legacy)
			qemu_opts "-vga std"
			;;
		linux-efi)
			qemu_opts "-vga none"
			template_efi
			;;
		linux-*)
			echo "BIOS type not defined, terminating"
			QEMUOPTS="NA"
			;;
		win*)
			qemu_opts "-device qemu-xhci,id=xhci"
			qemu_opts "-device usb-tablet,bus=xhci.0"
			qemu_opts "-monitor stdio"
			# TODO no console = gtk

			if [ $VMCONSOLE == '-' ] ; then
				qemu_opts "-device qxl-vga"
				#qemu_opts "-display gtk,gl=on,full-screen=on"
				qemu_opts "-display sdl"
			else

				qemu_opts "-device qxl-vga"
				qemu_opts "-device virtio-serial-pci"
				qemu_opts "-spice port=$VMCONSOLE,disable-ticketing"
				qemu_opts "-device virtserialport,chardev=spicechannel0,name=com.redhat.spice.0"
				qemu_opts "-chardev spicevmc,id=spicechannel0,name=vdagent"
			fi
			template_iso
			;;&
		win-efi)
			template_efi
			;;
		*)
			QEMUOPTS="NA"
			;;
	esac
}

#~ create blank.iso in $DATASTORE mountpoint
[ -f $BLANKISO ] || {
	mkdir /tmp/blank-iso_tmp_${DATEUNIX}
	mkisofs -o $BLANKISO -V blank /tmp/blank-iso_tmp_${DATEUNIX}
	rmdir /tmp/blank-iso_tmp_${DATEUNIX}
}

IFS=$'\n' read -r -d '' -a VMDATASET < <(
	zfs list -r -H -p -o name $DATASTORE | grep -v ${DATASTORE}$
	printf '\0'
)

for i in ${!VMDATASET[@]}; do
	IFS=$'\n' read -r -d '' -a VMPROP < <(
		zfs get -H -o value mountpoint,vmprop:os,vmprop:consoleport,vmprop:hostid,vmprop:user,vmprop:mem,vmprop:smp,vmprop:cpu,vmprop:net,vmprop:pcie,vmprop:usb,vmprop:net:hostfwd,vmprop:gvtg ${VMDATASET[i]}
		printf '\0'
	)
	unset QEMUOPTS
	qemu_opts $QEMU 
	qemu_opts $QEMUARGS
	VMMOUNTPOINT=${VMPROP[0]}
	VMNAME=$(basename $VMMOUNTPOINT)
	VMBOOTDISK=$VMMOUNTPOINT/${VMNAME}.raw
	VMOS=${VMPROP[1]}
	VMCONSOLE=${VMPROP[2]}
	VMHOSTID=${VMPROP[3]}
	VMUSER=${VMPROP[4]}
	VMMEM=${VMPROP[5]}
	VMSMP=${VMPROP[6]}
	VMCPU=${VMPROP[7]}
	VMNET=${VMPROP[8]}
	VMPCIEIDS=(${VMPROP[9]})
	VMUSB=(${VMPROP[10]})
	VMNETPORTFWD=(${VMPROP[11]})

	echo -en "VM name: \t$VMNAME\t"
	if [ -f $VMMOUNTPOINT/.installed ] ; then
	       	echo "$VMMOUNTPOINT/.installed exist, exit"
		continue
	fi

	if [ $VMHOSTID == "-" ] ; then 
		echo "ERR: No hostid defined, exit"
		continue
	fi

	if [ $VMOS == "-" ] ; then
		echo "ERR: No OS type defined, exit"
		continue
	fi

	if [ $VMUSER == "-" ] ; then
		echo "No user defined, assuming $LOGNAME."
		VMUSER=$LOGNAME
	fi

	template_os
	[ "${QEMUOPTS[0]}" == 'NA' ] && { continue; }
	template_mem_smp_cpu
	template_network
	template_pcie
	template_usb
	template_gvtg
	template_disk
	template_ident
	echo " generate run.bsh"
	echo "BEGIN script $VMMOUNTPOINT/run.bsh"
	(
		exec > $VMMOUNTPOINT/run.bsh
		echo -e "#!/bin/bash"
		echo -e "# ${DATE}"
		echo -e "# \$ver:\t${VER}"
		echo -e "# Console/SPICE port:\t${VMCONSOLE}"
		echo -e "# Network type:\t${VMNET}"
		echo -e "# Add ISO (copy/paste BEFORE start VM):"
		echo -e "# -drive file=/mnt/snooky/software/ms/Win10_20H2_v2_English_x64.iso,index=1,media=cdrom,cache=none,readonly \""
		echo -e "# -drive file=/mnt/snooky/software/debian/debian-10.8.0-amd64-netinst.iso,index=1,media=cdrom,cache=none,readonly \""
		echo -e "# -drive file=/mnt/snooky/software/virtio/virtio-win-0.1.190.iso,index=2,media=cdrom,cache=none,readonly \""
		echo -e "# Linux Guest Serial Console:"
		echo -e "# screen -t $VMNAME //group ; screen -t runscript $VMMOUNTPOINT/run.bsh ; sleep 1 ; screen -t console //telnet localhost $VMCONSOLE"
		echo -e "# Windows SPICE Console:"
		echo -e "# screen -t $VMNAME //group ; screen -t runscript $VMMOUNTPOINT/run.bsh ; sleep 1 ; screen -t consolespicy -h localhost -p $VMCONSOLE"
		echo -e "#\n"

		echo -e "sudo chown $VMUSER $VMBOOTDISK\n"
		echo -e "$NETWORKCLIUP\n"
		echo -e "$USBCLIUP\n"
		echo -e "$PCIECLIUP\n"
		echo -e "${QEMUOPTS[@]}\n"
		echo -e "$NETWORKCLIDOWN\n"
		echo -e "$PCIECLIDOWN\n"
	)
	echo "END script"
	chmod +x $VMMOUNTPOINT/run.bsh
done

exit 0
